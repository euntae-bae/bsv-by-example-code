/*
 * Generated by Bluespec Compiler, version 2022.01-29-gc526ff54 (build c526ff54)
 * 
 * On Wed Aug  9 18:35:03 KST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkStimulusGen.h"


/* String declarations */
static std::string const __str_literal_1("(y, y_expected) = (%0d, %0d)", 28u);
static std::string const __str_literal_3(": FAILED", 8u);
static std::string const __str_literal_2(": PASSED", 8u);


/* Constructor */
MOD_mkStimulusGen::MOD_mkStimulusGen(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_f_expected(simHdl, "f_expected", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_f_in(simHdl, "f_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_f_out(simHdl, "f_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_x(simHdl, "x", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkStimulusGen::init_symbols_0()
{
  init_symbol(&symbols[0u], "f_expected", SYM_MODULE, &INST_f_expected);
  init_symbol(&symbols[1u], "f_in", SYM_MODULE, &INST_f_in);
  init_symbol(&symbols[2u], "f_out", SYM_MODULE, &INST_f_out);
  init_symbol(&symbols[3u], "RL_check_results", SYM_RULE);
  init_symbol(&symbols[4u], "RL_gen_stimulus", SYM_RULE);
  init_symbol(&symbols[5u], "x", SYM_MODULE, &INST_x);
}


/* Rule actions */

void MOD_mkStimulusGen::RL_gen_stimulus()
{
  tUInt32 DEF_x_PLUS_1___d6;
  tUInt32 DEF_x_PLUS_10___d5;
  tUInt32 DEF_b__h377;
  DEF_b__h377 = INST_x.METH_read();
  DEF_x_PLUS_10___d5 = DEF_b__h377 + 10u;
  DEF_x_PLUS_1___d6 = DEF_b__h377 + 1u;
  INST_f_out.METH_enq(DEF_b__h377);
  INST_x.METH_write(DEF_x_PLUS_10___d5);
  INST_f_expected.METH_enq(DEF_x_PLUS_1___d6);
}

void MOD_mkStimulusGen::RL_check_results()
{
  tUInt8 DEF_NOT_f_expected_first__2_SLE_50_6___d17;
  tUInt8 DEF_NOT_f_in_first__0_EQ_f_expected_first__2_4___d15;
  tUInt8 DEF_f_in_first__0_EQ_f_expected_first__2___d14;
  tUInt32 DEF_f_expected_first____d12;
  tUInt32 DEF_signed_f_expected_first__2___d13;
  tUInt32 DEF_f_in_first____d10;
  tUInt32 DEF_signed_f_in_first__0___d11;
  DEF_f_in_first____d10 = INST_f_in.METH_first();
  DEF_signed_f_in_first__0___d11 = DEF_f_in_first____d10;
  DEF_f_expected_first____d12 = INST_f_expected.METH_first();
  DEF_signed_f_expected_first__2___d13 = DEF_f_expected_first____d12;
  DEF_f_in_first__0_EQ_f_expected_first__2___d14 = DEF_f_in_first____d10 == DEF_f_expected_first____d12;
  DEF_NOT_f_in_first__0_EQ_f_expected_first__2_4___d15 = !DEF_f_in_first__0_EQ_f_expected_first__2___d14;
  DEF_NOT_f_expected_first__2_SLE_50_6___d17 = !primSLE8(1u,
							 32u,
							 (tUInt32)(DEF_f_expected_first____d12),
							 32u,
							 50u);
  INST_f_in.METH_deq();
  INST_f_expected.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "s,-32,-32",
		 &__str_literal_1,
		 DEF_signed_f_in_first__0___d11,
		 DEF_signed_f_expected_first__2___d13);
    if (DEF_f_in_first__0_EQ_f_expected_first__2___d14)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
    if (DEF_NOT_f_in_first__0_EQ_f_expected_first__2_4___d15)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
    if (DEF_NOT_f_expected_first__2_SLE_50_6___d17)
      dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */

tUInt32 MOD_mkStimulusGen::METH_request_get()
{
  tUInt32 DEF_request_get__avValue1;
  tUInt32 PORT_request_get;
  DEF_request_get__avValue1 = INST_f_out.METH_first();
  PORT_request_get = DEF_request_get__avValue1;
  INST_f_out.METH_deq();
  return PORT_request_get;
}

tUInt8 MOD_mkStimulusGen::METH_RDY_request_get()
{
  tUInt8 DEF_CAN_FIRE_request_get;
  tUInt8 PORT_RDY_request_get;
  DEF_CAN_FIRE_request_get = INST_f_out.METH_i_notEmpty();
  PORT_RDY_request_get = DEF_CAN_FIRE_request_get;
  return PORT_RDY_request_get;
}

void MOD_mkStimulusGen::METH_response_put(tUInt32 ARG_response_put)
{
  INST_f_in.METH_enq(ARG_response_put);
}

tUInt8 MOD_mkStimulusGen::METH_RDY_response_put()
{
  tUInt8 DEF_CAN_FIRE_response_put;
  tUInt8 PORT_RDY_response_put;
  DEF_CAN_FIRE_response_put = INST_f_in.METH_i_notFull();
  PORT_RDY_response_put = DEF_CAN_FIRE_response_put;
  return PORT_RDY_response_put;
}


/* Reset routines */

void MOD_mkStimulusGen::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_x.reset_RST(ARG_rst_in);
  INST_f_out.reset_RST(ARG_rst_in);
  INST_f_in.reset_RST(ARG_rst_in);
  INST_f_expected.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkStimulusGen::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkStimulusGen::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_f_expected.dump_state(indent + 2u);
  INST_f_in.dump_state(indent + 2u);
  INST_f_out.dump_state(indent + 2u);
  INST_x.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkStimulusGen::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_f_expected.dump_VCD_defs(num);
  num = INST_f_in.dump_VCD_defs(num);
  num = INST_f_out.dump_VCD_defs(num);
  num = INST_x.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkStimulusGen::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkStimulusGen &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkStimulusGen::vcd_defs(tVCDDumpType dt, MOD_mkStimulusGen &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkStimulusGen::vcd_prims(tVCDDumpType dt, MOD_mkStimulusGen &backing)
{
  INST_f_expected.dump_VCD(dt, backing.INST_f_expected);
  INST_f_in.dump_VCD(dt, backing.INST_f_in);
  INST_f_out.dump_VCD(dt, backing.INST_f_out);
  INST_x.dump_VCD(dt, backing.INST_x);
}
