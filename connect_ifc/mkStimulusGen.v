//
// Generated by Bluespec Compiler, version 2022.01-29-gc526ff54 (build c526ff54)
//
// On Wed Aug  9 18:35:05 KST 2023
//
//
// Ports:
// Name                         I/O  size props
// request_get                    O    32 reg
// RDY_request_get                O     1 reg
// RDY_response_put               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// response_put                   I    32 reg
// EN_response_put                I     1
// EN_request_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStimulusGen(CLK,
		     RST_N,

		     EN_request_get,
		     request_get,
		     RDY_request_get,

		     response_put,
		     EN_response_put,
		     RDY_response_put);
  input  CLK;
  input  RST_N;

  // actionvalue method request_get
  input  EN_request_get;
  output [31 : 0] request_get;
  output RDY_request_get;

  // action method response_put
  input  [31 : 0] response_put;
  input  EN_response_put;
  output RDY_response_put;

  // signals for module outputs
  wire [31 : 0] request_get;
  wire RDY_request_get, RDY_response_put;

  // register x
  reg [31 : 0] x;
  wire [31 : 0] x$D_IN;
  wire x$EN;

  // ports of submodule f_expected
  wire [31 : 0] f_expected$D_IN, f_expected$D_OUT;
  wire f_expected$CLR,
       f_expected$DEQ,
       f_expected$EMPTY_N,
       f_expected$ENQ,
       f_expected$FULL_N;

  // ports of submodule f_in
  wire [31 : 0] f_in$D_IN, f_in$D_OUT;
  wire f_in$CLR, f_in$DEQ, f_in$EMPTY_N, f_in$ENQ, f_in$FULL_N;

  // ports of submodule f_out
  wire [31 : 0] f_out$D_IN, f_out$D_OUT;
  wire f_out$CLR, f_out$DEQ, f_out$EMPTY_N, f_out$ENQ, f_out$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_check_results;

  // remaining internal signals
  wire f_in_first__0_EQ_f_expected_first__2___d14;

  // actionvalue method request_get
  assign request_get = f_out$D_OUT ;
  assign RDY_request_get = f_out$EMPTY_N ;

  // action method response_put
  assign RDY_response_put = f_in$FULL_N ;

  // submodule f_expected
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f_expected(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_expected$D_IN),
						     .ENQ(f_expected$ENQ),
						     .DEQ(f_expected$DEQ),
						     .CLR(f_expected$CLR),
						     .D_OUT(f_expected$D_OUT),
						     .FULL_N(f_expected$FULL_N),
						     .EMPTY_N(f_expected$EMPTY_N));

  // submodule f_in
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f_in(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(f_in$D_IN),
					       .ENQ(f_in$ENQ),
					       .DEQ(f_in$DEQ),
					       .CLR(f_in$CLR),
					       .D_OUT(f_in$D_OUT),
					       .FULL_N(f_in$FULL_N),
					       .EMPTY_N(f_in$EMPTY_N));

  // submodule f_out
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f_out(.RST(RST_N),
						.CLK(CLK),
						.D_IN(f_out$D_IN),
						.ENQ(f_out$ENQ),
						.DEQ(f_out$DEQ),
						.CLR(f_out$CLR),
						.D_OUT(f_out$D_OUT),
						.FULL_N(f_out$FULL_N),
						.EMPTY_N(f_out$EMPTY_N));

  // rule RL_check_results
  assign WILL_FIRE_RL_check_results = f_in$EMPTY_N && f_expected$EMPTY_N ;

  // register x
  assign x$D_IN = x + 32'd10 ;
  assign x$EN = f_out$FULL_N && f_expected$FULL_N ;

  // submodule f_expected
  assign f_expected$D_IN = x + 32'd1 ;
  assign f_expected$ENQ = f_out$FULL_N && f_expected$FULL_N ;
  assign f_expected$DEQ = WILL_FIRE_RL_check_results ;
  assign f_expected$CLR = 1'b0 ;

  // submodule f_in
  assign f_in$D_IN = response_put ;
  assign f_in$ENQ = EN_response_put ;
  assign f_in$DEQ = WILL_FIRE_RL_check_results ;
  assign f_in$CLR = 1'b0 ;

  // submodule f_out
  assign f_out$D_IN = x ;
  assign f_out$ENQ = f_out$FULL_N && f_expected$FULL_N ;
  assign f_out$DEQ = EN_request_get ;
  assign f_out$CLR = 1'b0 ;

  // remaining internal signals
  assign f_in_first__0_EQ_f_expected_first__2___d14 =
	     f_in$D_OUT == f_expected$D_OUT ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        x <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    x = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_results)
	$write("(y, y_expected) = (%0d, %0d)",
	       $signed(f_in$D_OUT),
	       $signed(f_expected$D_OUT));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_results &&
	  f_in_first__0_EQ_f_expected_first__2___d14)
	$display(": PASSED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_results &&
	  !f_in_first__0_EQ_f_expected_first__2___d14)
	$display(": FAILED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_results &&
	  (f_expected$D_OUT ^ 32'h80000000) > 32'h80000032)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkStimulusGen

