//
// Generated by Bluespec Compiler, version 2022.01-29-gc526ff54 (build c526ff54)
//
// On Wed Aug  9 18:35:05 KST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1 reg
// response_get                   O    32 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    32 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDut(CLK,
	     RST_N,

	     request_put,
	     EN_request_put,
	     RDY_request_put,

	     EN_response_get,
	     response_get,
	     RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [31 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [31 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [31 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule f_in
  wire [31 : 0] f_in$D_IN, f_in$D_OUT;
  wire f_in$CLR, f_in$DEQ, f_in$EMPTY_N, f_in$ENQ, f_in$FULL_N;

  // ports of submodule f_out
  wire [31 : 0] f_out$D_IN, f_out$D_OUT;
  wire f_out$CLR, f_out$DEQ, f_out$EMPTY_N, f_out$ENQ, f_out$FULL_N;

  // action method request_put
  assign RDY_request_put = f_in$FULL_N ;

  // actionvalue method response_get
  assign response_get = f_out$D_OUT ;
  assign RDY_response_get = f_out$EMPTY_N ;

  // submodule f_in
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f_in(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(f_in$D_IN),
					       .ENQ(f_in$ENQ),
					       .DEQ(f_in$DEQ),
					       .CLR(f_in$CLR),
					       .D_OUT(f_in$D_OUT),
					       .FULL_N(f_in$FULL_N),
					       .EMPTY_N(f_in$EMPTY_N));

  // submodule f_out
  FIFO2 #(.width(32'd32), .guarded(1'd1)) f_out(.RST(RST_N),
						.CLK(CLK),
						.D_IN(f_out$D_IN),
						.ENQ(f_out$ENQ),
						.DEQ(f_out$DEQ),
						.CLR(f_out$CLR),
						.D_OUT(f_out$D_OUT),
						.FULL_N(f_out$FULL_N),
						.EMPTY_N(f_out$EMPTY_N));

  // submodule f_in
  assign f_in$D_IN = request_put ;
  assign f_in$ENQ = EN_request_put ;
  assign f_in$DEQ = f_in$EMPTY_N && f_out$FULL_N ;
  assign f_in$CLR = 1'b0 ;

  // submodule f_out
  assign f_out$D_IN =
	     (f_in$D_OUT == 32'd20) ?
	       f_in$D_OUT + 32'd2 :
	       f_in$D_OUT + 32'd1 ;
  assign f_out$ENQ = f_in$EMPTY_N && f_out$FULL_N ;
  assign f_out$DEQ = EN_response_get ;
  assign f_out$CLR = 1'b0 ;
endmodule  // mkDut

